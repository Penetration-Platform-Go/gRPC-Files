// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auto.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_185b57b5a26e9afe, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type JWTTokenKey struct {
	JWTTokenKey          string   `protobuf:"bytes,1,opt,name=JWTTokenKey,proto3" json:"JWTTokenKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTTokenKey) Reset()         { *m = JWTTokenKey{} }
func (m *JWTTokenKey) String() string { return proto.CompactTextString(m) }
func (*JWTTokenKey) ProtoMessage()    {}
func (*JWTTokenKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_185b57b5a26e9afe, []int{1}
}

func (m *JWTTokenKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTTokenKey.Unmarshal(m, b)
}
func (m *JWTTokenKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTTokenKey.Marshal(b, m, deterministic)
}
func (m *JWTTokenKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTTokenKey.Merge(m, src)
}
func (m *JWTTokenKey) XXX_Size() int {
	return xxx_messageInfo_JWTTokenKey.Size(m)
}
func (m *JWTTokenKey) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTTokenKey.DiscardUnknown(m)
}

var xxx_messageInfo_JWTTokenKey proto.InternalMessageInfo

func (m *JWTTokenKey) GetJWTTokenKey() string {
	if m != nil {
		return m.JWTTokenKey
	}
	return ""
}

type TokenMessages struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	IsValid              bool     `protobuf:"varint,2,opt,name=isValid,proto3" json:"isValid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenMessages) Reset()         { *m = TokenMessages{} }
func (m *TokenMessages) String() string { return proto.CompactTextString(m) }
func (*TokenMessages) ProtoMessage()    {}
func (*TokenMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_185b57b5a26e9afe, []int{2}
}

func (m *TokenMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenMessages.Unmarshal(m, b)
}
func (m *TokenMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenMessages.Marshal(b, m, deterministic)
}
func (m *TokenMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMessages.Merge(m, src)
}
func (m *TokenMessages) XXX_Size() int {
	return xxx_messageInfo_TokenMessages.Size(m)
}
func (m *TokenMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMessages proto.InternalMessageInfo

func (m *TokenMessages) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TokenMessages) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type Token struct {
	JWT                  string   `protobuf:"bytes,1,opt,name=JWT,proto3" json:"JWT,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_185b57b5a26e9afe, []int{3}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetJWT() string {
	if m != nil {
		return m.JWT
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "auth.Empty")
	proto.RegisterType((*JWTTokenKey)(nil), "auth.JWTTokenKey")
	proto.RegisterType((*TokenMessages)(nil), "auth.TokenMessages")
	proto.RegisterType((*Token)(nil), "auth.Token")
}

func init() { proto.RegisterFile("auto.proto", fileDescriptor_185b57b5a26e9afe) }

var fileDescriptor_185b57b5a26e9afe = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2c, 0x2d, 0xc9, 0x50, 0x62, 0xe7, 0x62,
	0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0xd2, 0xe7, 0xe2, 0xf6, 0x0a, 0x0f, 0x09, 0xc9, 0xcf, 0x4e,
	0xcd, 0xf3, 0x4e, 0xad, 0x14, 0x52, 0x40, 0xe1, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x21,
	0x0b, 0x29, 0xb9, 0x72, 0xf1, 0x82, 0xd9, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0xc5, 0x42,
	0x52, 0x5c, 0x1c, 0xa5, 0xc5, 0xa9, 0x45, 0x79, 0x89, 0xb9, 0xa9, 0x50, 0xf5, 0x70, 0xbe, 0x90,
	0x04, 0x17, 0x7b, 0x66, 0x71, 0x58, 0x62, 0x4e, 0x66, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47,
	0x10, 0x8c, 0xab, 0x24, 0xc9, 0xc5, 0x0a, 0x36, 0x46, 0x48, 0x80, 0x8b, 0xd9, 0x2b, 0x3c, 0x04,
	0xaa, 0x13, 0xc4, 0x34, 0x4a, 0xe3, 0x62, 0x71, 0x2c, 0x2d, 0xc9, 0x10, 0x32, 0xe0, 0xe2, 0x73,
	0x4f, 0x2d, 0x41, 0x76, 0x1d, 0xb7, 0x1e, 0xc8, 0xf1, 0x7a, 0x60, 0x97, 0x4b, 0x09, 0x42, 0x38,
	0xc8, 0xf2, 0x3a, 0x5c, 0x1c, 0xee, 0xa9, 0x25, 0x10, 0x73, 0x85, 0x21, 0xd2, 0x28, 0x6e, 0x95,
	0xe2, 0x46, 0x12, 0x4c, 0x62, 0x03, 0x07, 0x88, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x95,
	0x76, 0x28, 0x1e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	GetJWTTokenKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWTTokenKey, error)
	GetToken(ctx context.Context, in *TokenMessages, opts ...grpc.CallOption) (*Token, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetJWTTokenKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWTTokenKey, error) {
	out := new(JWTTokenKey)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetJWTTokenKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetToken(ctx context.Context, in *TokenMessages, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	GetJWTTokenKey(context.Context, *Empty) (*JWTTokenKey, error)
	GetToken(context.Context, *TokenMessages) (*Token, error)
}

// UnimplementedAuthServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) GetJWTTokenKey(ctx context.Context, req *Empty) (*JWTTokenKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJWTTokenKey not implemented")
}
func (*UnimplementedAuthServer) GetToken(ctx context.Context, req *TokenMessages) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetJWTTokenKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetJWTTokenKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetJWTTokenKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetJWTTokenKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetToken(ctx, req.(*TokenMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJWTTokenKey",
			Handler:    _Auth_GetJWTTokenKey_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Auth_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auto.proto",
}
