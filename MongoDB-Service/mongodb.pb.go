// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mongodb.proto

package mongodb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProjectValue struct {
	Temp                 string   `protobuf:"bytes,1,opt,name=temp,proto3" json:"temp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectValue) Reset()         { *m = ProjectValue{} }
func (m *ProjectValue) String() string { return proto.CompactTextString(m) }
func (*ProjectValue) ProtoMessage()    {}
func (*ProjectValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_21010b45f990def2, []int{0}
}

func (m *ProjectValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectValue.Unmarshal(m, b)
}
func (m *ProjectValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectValue.Marshal(b, m, deterministic)
}
func (m *ProjectValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectValue.Merge(m, src)
}
func (m *ProjectValue) XXX_Size() int {
	return xxx_messageInfo_ProjectValue.Size(m)
}
func (m *ProjectValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectValue.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectValue proto.InternalMessageInfo

func (m *ProjectValue) GetTemp() string {
	if m != nil {
		return m.Temp
	}
	return ""
}

type Username struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Username) Reset()         { *m = Username{} }
func (m *Username) String() string { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()    {}
func (*Username) Descriptor() ([]byte, []int) {
	return fileDescriptor_21010b45f990def2, []int{1}
}

func (m *Username) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Username.Unmarshal(m, b)
}
func (m *Username) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Username.Marshal(b, m, deterministic)
}
func (m *Username) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Username.Merge(m, src)
}
func (m *Username) XXX_Size() int {
	return xxx_messageInfo_Username.Size(m)
}
func (m *Username) XXX_DiscardUnknown() {
	xxx_messageInfo_Username.DiscardUnknown(m)
}

var xxx_messageInfo_Username proto.InternalMessageInfo

func (m *Username) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ProjectId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectId) Reset()         { *m = ProjectId{} }
func (m *ProjectId) String() string { return proto.CompactTextString(m) }
func (*ProjectId) ProtoMessage()    {}
func (*ProjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_21010b45f990def2, []int{2}
}

func (m *ProjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectId.Unmarshal(m, b)
}
func (m *ProjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectId.Marshal(b, m, deterministic)
}
func (m *ProjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectId.Merge(m, src)
}
func (m *ProjectId) XXX_Size() int {
	return xxx_messageInfo_ProjectId.Size(m)
}
func (m *ProjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectId.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectId proto.InternalMessageInfo

func (m *ProjectId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ProjectInformation struct {
	Id                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 string        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Value                *ProjectValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProjectInformation) Reset()         { *m = ProjectInformation{} }
func (m *ProjectInformation) String() string { return proto.CompactTextString(m) }
func (*ProjectInformation) ProtoMessage()    {}
func (*ProjectInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_21010b45f990def2, []int{3}
}

func (m *ProjectInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectInformation.Unmarshal(m, b)
}
func (m *ProjectInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectInformation.Marshal(b, m, deterministic)
}
func (m *ProjectInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectInformation.Merge(m, src)
}
func (m *ProjectInformation) XXX_Size() int {
	return xxx_messageInfo_ProjectInformation.Size(m)
}
func (m *ProjectInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectInformation proto.InternalMessageInfo

func (m *ProjectInformation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectInformation) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ProjectInformation) GetValue() *ProjectValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type Result struct {
	IsVaild              bool     `protobuf:"varint,1,opt,name=isVaild,proto3" json:"isVaild,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_21010b45f990def2, []int{4}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetIsVaild() bool {
	if m != nil {
		return m.IsVaild
	}
	return false
}

func (m *Result) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ProjectValue)(nil), "mongodb.ProjectValue")
	proto.RegisterType((*Username)(nil), "mongodb.Username")
	proto.RegisterType((*ProjectId)(nil), "mongodb.ProjectId")
	proto.RegisterType((*ProjectInformation)(nil), "mongodb.ProjectInformation")
	proto.RegisterType((*Result)(nil), "mongodb.Result")
}

func init() { proto.RegisterFile("mongodb.proto", fileDescriptor_21010b45f990def2) }

var fileDescriptor_21010b45f990def2 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x25, 0xf9, 0xfd, 0x6c, 0xd2, 0xd1, 0x28, 0x0e, 0x8a, 0x21, 0xbd, 0x94, 0x3d, 0x48, 0x41,
	0x28, 0x52, 0x3d, 0x78, 0xe9, 0xa5, 0xf4, 0x52, 0x44, 0xd0, 0x40, 0x7b, 0x4f, 0xdd, 0x51, 0x22,
	0x49, 0x36, 0x6c, 0x36, 0x42, 0xbf, 0x82, 0x9f, 0x5a, 0xb6, 0xbb, 0x1b, 0x4b, 0x0b, 0x1e, 0xbc,
	0xcd, 0xcb, 0xbc, 0x3f, 0xf3, 0xc2, 0x42, 0x54, 0x8a, 0xea, 0x5d, 0xf0, 0xf5, 0xb8, 0x96, 0x42,
	0x09, 0x0c, 0x2c, 0x64, 0x0c, 0x4e, 0x9e, 0xa5, 0xf8, 0xa0, 0x57, 0xb5, 0xca, 0x8a, 0x96, 0x10,
	0xe1, 0xbf, 0xa2, 0xb2, 0x8e, 0xbd, 0xa1, 0x37, 0xea, 0xa7, 0xdb, 0x99, 0x5d, 0x43, 0xb8, 0x6c,
	0x48, 0x56, 0x59, 0x49, 0x98, 0x40, 0xd8, 0xda, 0xd9, 0x72, 0x3a, 0xcc, 0x06, 0xd0, 0xb7, 0x5e,
	0x0b, 0x8e, 0xa7, 0xe0, 0xe7, 0xdc, 0x52, 0xfc, 0x9c, 0x33, 0x02, 0x74, 0xcb, 0xea, 0x4d, 0xc8,
	0x32, 0x53, 0xb9, 0xa8, 0xf6, 0x59, 0x3a, 0x5e, 0xdb, 0xc5, 0xbe, 0x89, 0xd7, 0x33, 0xde, 0xc0,
	0xd1, 0xa7, 0xbe, 0x2d, 0xfe, 0x37, 0xf4, 0x46, 0xc7, 0x93, 0xcb, 0xb1, 0xab, 0xb2, 0x7b, 0x78,
	0x6a, 0x38, 0xec, 0x01, 0x7a, 0x29, 0x35, 0x6d, 0xa1, 0x30, 0x86, 0x20, 0x6f, 0x56, 0x59, 0x5e,
	0x18, 0xff, 0x30, 0x75, 0x10, 0x2f, 0x9c, 0xa1, 0x49, 0x31, 0x60, 0xf2, 0xe5, 0x43, 0xf0, 0xa4,
	0x9d, 0xe7, 0x33, 0x7c, 0x84, 0xab, 0x97, 0x96, 0xe4, 0xc6, 0x26, 0x34, 0xb3, 0x4d, 0xf7, 0x03,
	0xce, 0xbb, 0x78, 0xf7, 0x29, 0x19, 0xec, 0x5f, 0xb4, 0xd3, 0xf0, 0xd6, 0xc3, 0x29, 0x44, 0x8b,
	0xaa, 0x21, 0xa9, 0xec, 0x16, 0x7f, 0xe3, 0x27, 0x67, 0xdd, 0xd2, 0xf6, 0x98, 0x42, 0xb4, 0xac,
	0x79, 0xa6, 0xe8, 0x6f, 0xf2, 0x7b, 0x88, 0xe6, 0x54, 0xd0, 0x8f, 0x1c, 0x0f, 0xe4, 0xfc, 0x40,
	0xb5, 0xee, 0x6d, 0x9f, 0xc9, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x64, 0x68, 0x3c,
	0x37, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MongoDBClient is the client API for MongoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MongoDBClient interface {
	QueryProjectsByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (MongoDB_QueryProjectsByUsernameClient, error)
	InsertProject(ctx context.Context, in *ProjectInformation, opts ...grpc.CallOption) (*Result, error)
	UpdateProject(ctx context.Context, in *ProjectInformation, opts ...grpc.CallOption) (*Result, error)
	DeleteProject(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Result, error)
}

type mongoDBClient struct {
	cc *grpc.ClientConn
}

func NewMongoDBClient(cc *grpc.ClientConn) MongoDBClient {
	return &mongoDBClient{cc}
}

func (c *mongoDBClient) QueryProjectsByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (MongoDB_QueryProjectsByUsernameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MongoDB_serviceDesc.Streams[0], "/mongodb.MongoDB/QueryProjectsByUsername", opts...)
	if err != nil {
		return nil, err
	}
	x := &mongoDBQueryProjectsByUsernameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MongoDB_QueryProjectsByUsernameClient interface {
	Recv() (*ProjectInformation, error)
	grpc.ClientStream
}

type mongoDBQueryProjectsByUsernameClient struct {
	grpc.ClientStream
}

func (x *mongoDBQueryProjectsByUsernameClient) Recv() (*ProjectInformation, error) {
	m := new(ProjectInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mongoDBClient) InsertProject(ctx context.Context, in *ProjectInformation, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/mongodb.MongoDB/InsertProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClient) UpdateProject(ctx context.Context, in *ProjectInformation, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/mongodb.MongoDB/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoDBClient) DeleteProject(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/mongodb.MongoDB/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDBServer is the server API for MongoDB service.
type MongoDBServer interface {
	QueryProjectsByUsername(*Username, MongoDB_QueryProjectsByUsernameServer) error
	InsertProject(context.Context, *ProjectInformation) (*Result, error)
	UpdateProject(context.Context, *ProjectInformation) (*Result, error)
	DeleteProject(context.Context, *ProjectId) (*Result, error)
}

// UnimplementedMongoDBServer can be embedded to have forward compatible implementations.
type UnimplementedMongoDBServer struct {
}

func (*UnimplementedMongoDBServer) QueryProjectsByUsername(req *Username, srv MongoDB_QueryProjectsByUsernameServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryProjectsByUsername not implemented")
}
func (*UnimplementedMongoDBServer) InsertProject(ctx context.Context, req *ProjectInformation) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProject not implemented")
}
func (*UnimplementedMongoDBServer) UpdateProject(ctx context.Context, req *ProjectInformation) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedMongoDBServer) DeleteProject(ctx context.Context, req *ProjectId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}

func RegisterMongoDBServer(s *grpc.Server, srv MongoDBServer) {
	s.RegisterService(&_MongoDB_serviceDesc, srv)
}

func _MongoDB_QueryProjectsByUsername_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Username)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MongoDBServer).QueryProjectsByUsername(m, &mongoDBQueryProjectsByUsernameServer{stream})
}

type MongoDB_QueryProjectsByUsernameServer interface {
	Send(*ProjectInformation) error
	grpc.ServerStream
}

type mongoDBQueryProjectsByUsernameServer struct {
	grpc.ServerStream
}

func (x *mongoDBQueryProjectsByUsernameServer) Send(m *ProjectInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _MongoDB_InsertProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServer).InsertProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodb.MongoDB/InsertProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServer).InsertProject(ctx, req.(*ProjectInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDB_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodb.MongoDB/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServer).UpdateProject(ctx, req.(*ProjectInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoDB_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDBServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodb.MongoDB/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDBServer).DeleteProject(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

var _MongoDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mongodb.MongoDB",
	HandlerType: (*MongoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProject",
			Handler:    _MongoDB_InsertProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _MongoDB_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _MongoDB_DeleteProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryProjectsByUsername",
			Handler:       _MongoDB_QueryProjectsByUsername_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mongodb.proto",
}
