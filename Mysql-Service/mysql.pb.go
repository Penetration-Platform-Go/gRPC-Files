// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mysql.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Username struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Username) Reset()         { *m = Username{} }
func (m *Username) String() string { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()    {}
func (*Username) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2c41a7352f42e6, []int{0}
}

func (m *Username) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Username.Unmarshal(m, b)
}
func (m *Username) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Username.Marshal(b, m, deterministic)
}
func (m *Username) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Username.Merge(m, src)
}
func (m *Username) XXX_Size() int {
	return xxx_messageInfo_Username.Size(m)
}
func (m *Username) XXX_DiscardUnknown() {
	xxx_messageInfo_Username.DiscardUnknown(m)
}

var xxx_messageInfo_Username proto.InternalMessageInfo

func (m *Username) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UserInformation struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Nickname             string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo                string   `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInformation) Reset()         { *m = UserInformation{} }
func (m *UserInformation) String() string { return proto.CompactTextString(m) }
func (*UserInformation) ProtoMessage()    {}
func (*UserInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2c41a7352f42e6, []int{1}
}

func (m *UserInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInformation.Unmarshal(m, b)
}
func (m *UserInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInformation.Marshal(b, m, deterministic)
}
func (m *UserInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInformation.Merge(m, src)
}
func (m *UserInformation) XXX_Size() int {
	return xxx_messageInfo_UserInformation.Size(m)
}
func (m *UserInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInformation.DiscardUnknown(m)
}

var xxx_messageInfo_UserInformation proto.InternalMessageInfo

func (m *UserInformation) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInformation) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserInformation) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInformation) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserInformation) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

type Result struct {
	IsVaild              bool     `protobuf:"varint,1,opt,name=isVaild,proto3" json:"isVaild,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2c41a7352f42e6, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetIsVaild() bool {
	if m != nil {
		return m.IsVaild
	}
	return false
}

func (m *Result) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Username)(nil), "auth.Username")
	proto.RegisterType((*UserInformation)(nil), "auth.UserInformation")
	proto.RegisterType((*Result)(nil), "auth.Result")
}

func init() { proto.RegisterFile("mysql.proto", fileDescriptor_ca2c41a7352f42e6) }

var fileDescriptor_ca2c41a7352f42e6 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0xa9, 0x6e, 0xd7, 0x3a, 0x8a, 0x42, 0x54, 0x08, 0x3d, 0x49, 0x0f, 0xe2, 0xa9, 0xb0,
	0x7a, 0xf1, 0xe0, 0xc9, 0xdb, 0x1e, 0x3c, 0x58, 0x58, 0xef, 0xd1, 0x8e, 0x6c, 0x30, 0x4d, 0x6a,
	0xfe, 0x28, 0x7d, 0x0c, 0x9f, 0xc3, 0x97, 0x94, 0x49, 0xda, 0xd5, 0x83, 0xc8, 0xde, 0xfa, 0xeb,
	0x37, 0xbf, 0x30, 0xf9, 0x02, 0x07, 0xdd, 0xe0, 0xde, 0x54, 0xdd, 0x5b, 0xe3, 0x0d, 0x9b, 0x89,
	0xe0, 0xd7, 0xd5, 0x05, 0x14, 0x2b, 0x87, 0x56, 0x8b, 0x0e, 0x59, 0x09, 0x45, 0x18, 0xbf, 0x79,
	0x76, 0x9e, 0x5d, 0xee, 0x37, 0x1b, 0xae, 0x3e, 0x33, 0x38, 0xa6, 0xc1, 0xa5, 0x7e, 0x31, 0xb6,
	0x13, 0x5e, 0x1a, 0xfd, 0xdf, 0x3c, 0x65, 0xbd, 0x70, 0xee, 0xc3, 0xd8, 0x96, 0xef, 0xa4, 0x6c,
	0x62, 0x76, 0x0a, 0x39, 0x76, 0x42, 0x2a, 0xbe, 0x1b, 0x83, 0x04, 0x64, 0x68, 0xf9, 0xfc, 0x1a,
	0x4f, 0x9b, 0x25, 0x63, 0x62, 0x32, 0xfa, 0xb5, 0xf1, 0x86, 0xe7, 0xc9, 0x88, 0x50, 0xdd, 0xc0,
	0xbc, 0x41, 0x17, 0x94, 0x67, 0x1c, 0xf6, 0xa4, 0x7b, 0x14, 0x52, 0xb5, 0x71, 0x91, 0xa2, 0x99,
	0x90, 0xcc, 0x77, 0xa1, 0x02, 0x8e, 0x4b, 0x24, 0xb8, 0xfa, 0xca, 0x20, 0xbf, 0xa7, 0x2e, 0xd8,
	0x2d, 0x9c, 0x3c, 0x04, 0xb4, 0x03, 0xdd, 0xed, 0x6e, 0xd8, 0x54, 0x71, 0x54, 0x53, 0x3b, 0xf5,
	0xc4, 0xe5, 0xd9, 0x0f, 0xff, 0x6e, 0x60, 0x01, 0xb0, 0xd4, 0x0e, 0xad, 0xa7, 0x80, 0xfd, 0x3d,
	0x54, 0x1e, 0xa6, 0xdf, 0xe3, 0xaa, 0x0b, 0x80, 0x55, 0xdf, 0x0a, 0x8f, 0x5b, 0x2b, 0x4f, 0xf3,
	0xf8, 0x60, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x21, 0x4a, 0x60, 0xbf, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MysqlClient is the client API for Mysql service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MysqlClient interface {
	QueryUserByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserInformation, error)
	InsertUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Result, error)
	UpdateUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Result, error)
}

type mysqlClient struct {
	cc *grpc.ClientConn
}

func NewMysqlClient(cc *grpc.ClientConn) MysqlClient {
	return &mysqlClient{cc}
}

func (c *mysqlClient) QueryUserByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserInformation, error) {
	out := new(UserInformation)
	err := c.cc.Invoke(ctx, "/auth.Mysql/QueryUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) InsertUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/auth.Mysql/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) UpdateUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/auth.Mysql/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlServer is the server API for Mysql service.
type MysqlServer interface {
	QueryUserByUsername(context.Context, *Username) (*UserInformation, error)
	InsertUser(context.Context, *UserInformation) (*Result, error)
	UpdateUser(context.Context, *UserInformation) (*Result, error)
}

// UnimplementedMysqlServer can be embedded to have forward compatible implementations.
type UnimplementedMysqlServer struct {
}

func (*UnimplementedMysqlServer) QueryUserByUsername(ctx context.Context, req *Username) (*UserInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserByUsername not implemented")
}
func (*UnimplementedMysqlServer) InsertUser(ctx context.Context, req *UserInformation) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (*UnimplementedMysqlServer) UpdateUser(ctx context.Context, req *UserInformation) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

func RegisterMysqlServer(s *grpc.Server, srv MysqlServer) {
	s.RegisterService(&_Mysql_serviceDesc, srv)
}

func _Mysql_QueryUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).QueryUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Mysql/QueryUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).QueryUserByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Mysql/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).InsertUser(ctx, req.(*UserInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Mysql/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).UpdateUser(ctx, req.(*UserInformation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mysql_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Mysql",
	HandlerType: (*MysqlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserByUsername",
			Handler:    _Mysql_QueryUserByUsername_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _Mysql_InsertUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Mysql_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysql.proto",
}
